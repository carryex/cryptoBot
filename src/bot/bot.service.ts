import { Injectable } from '@nestjs/common';
import { ScanService } from '../scan/scan.service';
import { Markup } from 'telegraf';
import { Context } from './bot.interface';
import { getWalletTemplate, orderService, replyOrEdit } from './bot.utils';

@Injectable()
export class BotService {
  constructor(private scanService: ScanService) {}
  echo(text: string): string {
    return `Echo: ${text}`;
  }

  async start(ctx: Context) {
    const text = `–ü—Ä–∏–≤–µ—Ç. –Ø –∫—Ä–∏–ø—Ç–æ–±–æ—Ç\n–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç—É, –Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–µ –µ–≤—Ä–æ üí∂.\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏–∏ üá≤üá™.`;
    const buttons = [Markup.button.callback('üèõÔ∏è –ú–∞—Ä–∫–µ—Ç', 'MARKET')];
    const inlineButtons = Markup.inlineKeyboard(buttons);
    return replyOrEdit(ctx, text, inlineButtons);
  }

  async market(ctx: Context) {
    const text = `üí† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ –µ–≤—Ä–æ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–µ —á–µ—Ä–µ–∑ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—É–ª.\n\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ü§î:\n1) —Å–æ–±–∏—Ä–∞–µ–º –ø—É–ª –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ Tether USDT (BEP20)\n2) –∫–æ–≥–¥–∞ –ø—É–ª —Å–æ–±—Ä–∞–Ω - –¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n3) –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—É–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–µ –µ–≤—Ä–æ üí∂\n\n* C—Ä–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç 10 000 USDT, –∫–æ–º–∏—Å—Å–∏—è 5%
    \n\nüõ° –ë–æ—Ç –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–æ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏. –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É ‚Äì 0%, –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ‚Äì 4%.`;
    const buttons = [
      [Markup.button.callback('üöÄ –£–≤–∞–≤—Å—Ç–æ–≤–∞—Ç—å –≤ –ø—É–ª–µ', 'ENTER_PULL')],
      [
        Markup.button.callback('üìà –ö—É–ø–∏—Ç—å', 'BYE'),
        Markup.button.callback('üìä –°–¥–µ–ª–∫–∏', 'DEALS'),
      ],
      [Markup.button.callback('üî• –°—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥', 'FAST_PULL')],
      [Markup.button.callback('‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø—É–ª–∞', 'STATUS_PULL')],
      [Markup.button.callback('< –ù–∞–∑–∞–¥', 'BACK')],
    ];
    const inlineButtons = Markup.inlineKeyboard(buttons);
    return replyOrEdit(ctx, text, inlineButtons);
  }

  async walletNumber(ctx: Context) {
    const text = `–î–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—É–ª –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞`;
    await orderService(ctx, text);
    return;
  }

  async validateWallet(wallet: string, min: number) {
    const notEnougthMoneyText = (balance: string) =>
      `–ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. (–±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${balance})\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${min}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—É–ª–ª–µ`;
    const notFoundText = `–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—É–ª–ª–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥`;
    return await this.scanService.validateCryptoWallet(
      wallet,
      min,
      notEnougthMoneyText,
      notFoundText,
    );
  }

  async amount(ctx: Context) {
    const text = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`;
    await orderService(ctx, text);
    return;
  }

  async invalidWallet(ctx: Context, text: string) {
    await orderService(ctx, text);
    return;
  }

  async invalidAmount(ctx: Context, text: string) {
    await orderService(ctx, text);
    return;
  }

  async validateAmount(ctx: Context, amount: number) {
    const notEnougthMoneyText = (balance: string) =>
      `–ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${balance}).\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`;
    const notFoundText = `–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—É–ª–ª–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥`;
    const { wallet } = ctx.scene.session.state;
    return await this.scanService.validateCryptoWallet(
      wallet,
      amount,
      notEnougthMoneyText,
      notFoundText,
    );
  }

  async confirm(ctx: Context) {
    const extraText = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É';
    const { text, wallet, amount } = getWalletTemplate(ctx, extraText);
    if (wallet && amount) {
      const buttons = [
        [
          Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'CONFIRM'),
          Markup.button.callback('< –ù–∞–∑–∞–¥', 'BACK'),
        ],
      ];
      const inlineKeyboard = Markup.inlineKeyboard(buttons);
      await replyOrEdit(ctx, text, inlineKeyboard);
      return;
    }
  }

  async complite(ctx: Context) {
    const text = `üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ü—É–ª –Ω–∞—á–Ω–µ—Ç—Å—è —É–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ, –∏ —Ç–æ–≥–¥–∞ –º—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.`;
    const buttons = [Markup.button.callback('–û–ö', 'OK')];
    const inlineKeyboard = Markup.inlineKeyboard(buttons);
    await replyOrEdit(ctx, text, inlineKeyboard);
    return;
  }
}
